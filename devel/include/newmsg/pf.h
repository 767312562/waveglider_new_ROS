// Generated by gencpp from file newmsg/pf.msg
// DO NOT EDIT!


#ifndef NEWMSG_MESSAGE_PF_H
#define NEWMSG_MESSAGE_PF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace newmsg
{
template <class ContainerAllocator>
struct pf_
{
  typedef pf_<ContainerAllocator> Type;

  pf_()
    : p_1()
    , p_2()
    , p_3()
    , p_4()
    , p_5()  {
    }
  pf_(const ContainerAllocator& _alloc)
    : p_1(_alloc)
    , p_2(_alloc)
    , p_3(_alloc)
    , p_4(_alloc)
    , p_5(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_1_type;
  _p_1_type p_1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_2_type;
  _p_2_type p_2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_3_type;
  _p_3_type p_3;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_4_type;
  _p_4_type p_4;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_5_type;
  _p_5_type p_5;





  typedef boost::shared_ptr< ::newmsg::pf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::newmsg::pf_<ContainerAllocator> const> ConstPtr;

}; // struct pf_

typedef ::newmsg::pf_<std::allocator<void> > pf;

typedef boost::shared_ptr< ::newmsg::pf > pfPtr;
typedef boost::shared_ptr< ::newmsg::pf const> pfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::newmsg::pf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::newmsg::pf_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace newmsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'newmsg': ['/home/wp/waveglider_new/src/newmsg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::newmsg::pf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::newmsg::pf_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::newmsg::pf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::newmsg::pf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::newmsg::pf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::newmsg::pf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::newmsg::pf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d83cd7bb6bd06c328faaefd30fb67de3";
  }

  static const char* value(const ::newmsg::pf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd83cd7bb6bd06c32ULL;
  static const uint64_t static_value2 = 0x8faaefd30fb67de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::newmsg::pf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "newmsg/pf";
  }

  static const char* value(const ::newmsg::pf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::newmsg::pf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] p_1\n\
float32[] p_2\n\
float32[] p_3\n\
float32[] p_4\n\
float32[] p_5\n\
";
  }

  static const char* value(const ::newmsg::pf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::newmsg::pf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p_1);
      stream.next(m.p_2);
      stream.next(m.p_3);
      stream.next(m.p_4);
      stream.next(m.p_5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::newmsg::pf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::newmsg::pf_<ContainerAllocator>& v)
  {
    s << indent << "p_1[]" << std::endl;
    for (size_t i = 0; i < v.p_1.size(); ++i)
    {
      s << indent << "  p_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_1[i]);
    }
    s << indent << "p_2[]" << std::endl;
    for (size_t i = 0; i < v.p_2.size(); ++i)
    {
      s << indent << "  p_2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_2[i]);
    }
    s << indent << "p_3[]" << std::endl;
    for (size_t i = 0; i < v.p_3.size(); ++i)
    {
      s << indent << "  p_3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_3[i]);
    }
    s << indent << "p_4[]" << std::endl;
    for (size_t i = 0; i < v.p_4.size(); ++i)
    {
      s << indent << "  p_4[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_4[i]);
    }
    s << indent << "p_5[]" << std::endl;
    for (size_t i = 0; i < v.p_5.size(); ++i)
    {
      s << indent << "  p_5[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_5[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEWMSG_MESSAGE_PF_H
